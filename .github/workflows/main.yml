name: CI/CD Workflow

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  BACKEND_ECR_REPOSITORY: malware_detection_backend
  FRONTEND_ECR_REPOSITORY: malware_detection_frontend
  ECS_CLUSTER: malware_detection
  ECS_BACKEND_SERVICE: malware_detection_backend
  ECS_FRONTEND_SERVICE: malware_detection_frontend
  CONTAINER_NAME_BACKEND: malware_detection_backend
  CONTAINER_NAME_FRONTEND: malware_detection_frontend

jobs:
  create-s3-artifact-bucket:
    runs-on: ubuntu-latest
    outputs:
      AWS_ACCOUNT_ID: ${{ steps.account_id.outputs.AWS_ACCOUNT_ID }}
      ARTIFACTS_BUCKET: ${{ steps.create_s3_bucket.outputs.BUCKET_NAME }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: account_id
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Create S3 bucket if not exists
        id: create_s3_bucket
        run: |
          BUCKET_NAME="${AWS_ACCOUNT_ID}-artifacts"
          echo "Creating bucket with name: $BUCKET_NAME"
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'
          then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region $AWS_REGION
          fi
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: create-s3-artifact-bucket
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Provision Infrastructure from terraform
        env:
          ARTIFACTS_BUCKET: ${{ needs.create-s3-artifact-bucket.outputs.ARTIFACTS_BUCKET }}
        run: |
          cd terraform
          terraform init -backend-config="bucket=${ARTIFACTS_BUCKET}"
          terraform apply -auto-approve

  build-and-push:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          VIRUS_TOTAL_API_KEY: ${{ secrets.VIRUS_TOTAL_API_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          docker build --build-arg SECRET_KEY=${SECRET_KEY} --build-arg VIRUS_TOTAL_API_KEY=${VIRUS_TOTAL_API_KEY} --build-arg MONGODB_URI=${MONGODB_URI} -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "BACKEND_IMAGE=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "FRONTEND_IMAGE=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  update-ecs-services:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Backend ECS Service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_BACKEND_SERVICE --force-new-deployment

      - name: Update Frontend ECS Service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --force-new-deployment

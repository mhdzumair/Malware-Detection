name: CI/CD Workflow

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  create-s3-artifact-bucket:
    runs-on: ubuntu-latest
    outputs:
      AWS_ACCOUNT_ID: ${{ steps.account_id.outputs.AWS_ACCOUNT_ID }}
      ARTIFACTS_BUCKET: ${{ steps.create_s3_bucket.outputs.BUCKET_NAME }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: account_id
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Create S3 bucket if not exists
        id: create_s3_bucket
        run: |
          BUCKET_NAME="${AWS_ACCOUNT_ID}-artifacts"
          echo "Creating bucket with name: $BUCKET_NAME"
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'
          then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region $AWS_REGION
          fi
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_OUTPUT

  build-lambda:
    runs-on: ubuntu-latest
    needs: create-s3-artifact-bucket
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Build S3 Scan Lambda
        run: |
          cd s3_scan
          ./build.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        env:
          ARTIFACTS_BUCKET: ${{ needs.create-s3-artifact-bucket.outputs.ARTIFACTS_BUCKET }}
        run: |
          aws s3 cp s3_scan/package/s3_scan_1.0.0.zip s3://$ARTIFACTS_BUCKET/s3_scan_1.0.0.zip

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs:
      - create-s3-artifact-bucket
      - build-lambda
    outputs:
      BACKEND_ECR_REPOSITORY: ${{ steps.set_tf_outputs.outputs.BACKEND_ECR_REPOSITORY }}
      FRONTEND_ECR_REPOSITORY: ${{ steps.set_tf_outputs.outputs.FRONTEND_ECR_REPOSITORY }}
      ECS_CLUSTER: ${{ steps.set_tf_outputs.outputs.ECS_CLUSTER }}
      ECS_BACKEND_SERVICE: ${{ steps.set_tf_outputs.outputs.ECS_BACKEND_SERVICE }}
      ECS_FRONTEND_SERVICE: ${{ steps.set_tf_outputs.outputs.ECS_FRONTEND_SERVICE }}
      CONTAINER_NAME_BACKEND: ${{ steps.set_tf_outputs.outputs.CONTAINER_NAME_BACKEND }}
      CONTAINER_NAME_FRONTEND: ${{ steps.set_tf_outputs.outputs.CONTAINER_NAME_FRONTEND }}
      ALB_DNS_NAME: ${{ steps.set_tf_outputs.outputs.ALB_DNS_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Provision Infrastructure from terraform
        env:
          ARTIFACTS_BUCKET: ${{ needs.create-s3-artifact-bucket.outputs.ARTIFACTS_BUCKET }}
          MALWARE_DETECTION_SERVER_API_KEY: ${{ secrets.MALWARE_DETECTION_SERVER_API_KEY }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        run: |
          cd terraform
          terraform init -backend-config="bucket=${ARTIFACTS_BUCKET}"
          terraform apply -auto-approve \
            -var="malware_detection_server_api_key=${MALWARE_DETECTION_SERVER_API_KEY}" \
            -var="artifact_bucket_name=${ARTIFACTS_BUCKET}" \
            -var="admin_email=${ADMIN_EMAIL}"

      - name: Set environment variables from Terraform outputs
        id: set_tf_outputs
        run: |
          cd terraform
          OUTPUTS=$(terraform output -json)

          echo "BACKEND_ECR_REPOSITORY=$(echo $OUTPUTS | jq -r '.backend_ecr_repository_url.value')" >> $GITHUB_OUTPUT
          echo "FRONTEND_ECR_REPOSITORY=$(echo $OUTPUTS | jq -r '.frontend_ecr_repository_url.value')" >> $GITHUB_OUTPUT
          echo "ECS_CLUSTER=$(echo $OUTPUTS | jq -r '.ecs_cluster_name.value')" >> $GITHUB_OUTPUT
          echo "ECS_BACKEND_SERVICE=$(echo $OUTPUTS | jq -r '.ecs_service_names.value[0]')" >> $GITHUB_OUTPUT
          echo "ECS_FRONTEND_SERVICE=$(echo $OUTPUTS | jq -r '.ecs_service_names.value[1]')" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME_BACKEND=$(echo $OUTPUTS | jq -r '.backend_ecr_repository_url.value')" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME_FRONTEND=$(echo $OUTPUTS | jq -r '.frontend_ecr_repository_url.value')" >> $GITHUB_OUTPUT
          echo "ALB_DNS_NAME=$(echo $OUTPUTS | jq -r '.alb_dns_name.value')" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image to Amazon ECR
        env:
          IMAGE_TAG: latest
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          VIRUS_TOTAL_API_KEY: ${{ secrets.VIRUS_TOTAL_API_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          BACKEND_ECR_REPOSITORY: ${{ needs.deploy-infrastructure.outputs.BACKEND_ECR_REPOSITORY }}
          MALWARE_DETECTION_SERVER_API_KEY: ${{ secrets.MALWARE_DETECTION_SERVER_API_KEY }}
        run: |
          docker build \
            --build-arg SECRET_KEY=$SECRET_KEY \
            --build-arg VIRUS_TOTAL_API_KEY=$VIRUS_TOTAL_API_KEY \
            --build-arg MONGODB_URI=$MONGODB_URI \
            --build-arg MALWARE_DETECTION_SERVER_API_KEY=$MALWARE_DETECTION_SERVER_API_KEY \
            -t $BACKEND_ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "BACKEND_IMAGE=$BACKEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push frontend image to Amazon ECR
        env:
          IMAGE_TAG: latest
          FRONTEND_ECR_REPOSITORY: ${{ needs.deploy-infrastructure.outputs.FRONTEND_ECR_REPOSITORY }}
        run: |
          docker build -t $FRONTEND_ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "FRONTEND_IMAGE=$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  update-ecs-services:
    runs-on: ubuntu-latest
    needs:
      - build-and-push
      - deploy-infrastructure
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Backend ECS Service
        env:
          ECS_CLUSTER: ${{ needs.deploy-infrastructure.outputs.ECS_CLUSTER }}
          ECS_BACKEND_SERVICE: ${{ needs.deploy-infrastructure.outputs.ECS_BACKEND_SERVICE }}
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_BACKEND_SERVICE --force-new-deployment

      - name: Update Frontend ECS Service
        env:
          ECS_CLUSTER: ${{ needs.deploy-infrastructure.outputs.ECS_CLUSTER }}
          ECS_FRONTEND_SERVICE: ${{ needs.deploy-infrastructure.outputs.ECS_FRONTEND_SERVICE }}
          ALB_DNS_NAME: ${{ needs.deploy-infrastructure.outputs.ALB_DNS_NAME }}
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --force-new-deployment
          echo "Access the application at: http://$ALB_DNS_NAME"

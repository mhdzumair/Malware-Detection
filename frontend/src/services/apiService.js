import axios from 'axios';

const API_BASE_URL = process.env.VUE_APP_API_BASE_URL || '/api';
const MALWARE_DETECTION_INPUT_BUCKET = process.env.VUE_APP_MALWARE_DETECTION_INPUT_BUCKET;

export const login = async (username, password) => {
    const data = `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`;

    const response = await axios.post(`${API_BASE_URL}/authentication`, data, {
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    });
    return response.data;
};


export const logout = () => {
    localStorage.removeItem('token');
};

axios.interceptors.request.use(config => {
    const token = localStorage.getItem('token');
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

axios.interceptors.response.use(
    response => response,
    error => {
        // Check if the error is from the login endpoint
        const isLoginError = error.response.config.url.includes('/authentication');

        // Redirect to login only if it's not a login error and the status is 401
        if (!isLoginError && error.response && error.response.status === 401) {
            logout();
            window.location = '/login';
        }
        return Promise.reject(error);
    }
);

export const scanFile = async (file, fileUrl, zipPassword, knownStatus, useExternalTools, forceRescan) => {
    // Prepare query parameters
    const params = new URLSearchParams();
    if (knownStatus !== null) params.append('known_status', knownStatus);
    if (useExternalTools !== undefined) params.append('external_tools', useExternalTools);
    if (forceRescan !== undefined) params.append('force_rescan', forceRescan);
    if (zipPassword) params.append('zip_password', zipPassword);
    if (fileUrl) params.append('file_url', fileUrl);

    // Prepare the request
    const config = {
        params,
        headers: {}
    };

    // If a file is provided, add it to FormData and set the appropriate header
    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        config.headers['Content-Type'] = 'multipart/form-data';
        config.data = formData;
    }

    try {
        const response = await axios.post(`${API_BASE_URL}/scan`, config.data, config);
        return response.data;
    } catch (error) {
        console.error('Error scanning file:', error);
        throw error;
    }
};

export const fetchScanResultsSummary = async (modelType) => {
    try {
        const response = await axios.get(`${API_BASE_URL}/scan-results-summary/${modelType}`);
        return response.data;
    } catch (error) {
        console.error(`Error fetching ${modelType} scan results summary:`, error);
        throw error;
    }
};


export const getScans = async (options) => {
    // Set default values if options are not defined
    const page = options.page || 1;
    const itemsPerPage = options.itemsPerPage || 10;


    const params = new URLSearchParams({
        skip: (page - 1) * itemsPerPage,
        limit: itemsPerPage,
    });

    try {
        const response = await axios.get(`${API_BASE_URL}/scans`, {params});
        return {
            items: response.data.items,
            total: response.data.total
        };
    } catch (error) {
        console.error('Error fetching scans:', error);
        throw error;
    }
};

export const fetchScanActivitySummary = async () => {
    try {
        const response = await axios.get(`${API_BASE_URL}/scan-activity-summary`);
        return response.data;
    } catch (error) {
        console.error('Error fetching scan activity summary:', error);
        throw error;
    }
};


export const uploadFileToS3 = async (file, fileUrl, zipPassword) => {
    const params = new URLSearchParams();
    params.append('s3_bucket', MALWARE_DETECTION_INPUT_BUCKET);
    if (zipPassword) params.append('zip_password', zipPassword);
    if (fileUrl) params.append('file_url', fileUrl);

    const config = {
        params,
        headers: {}
    };

    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        config.headers['Content-Type'] = 'multipart/form-data';
        config.data = formData;
    }

    try {
        const response = await axios.post(`${API_BASE_URL}/upload-to-s3`, config.data, config);
        return response.data;
    } catch (error) {
        console.error('Error scanning file:', error);
        throw error;
    }
};
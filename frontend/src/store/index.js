import {createStore} from 'vuex';
import {fetchScanActivitySummary, fetchScanResultsSummary} from '@/services/apiService';

const getters = {
    randomForestSummary: state => {
        return {
            totalScans: state.summaryCards.randomForestData.total_scans,
            modelAccuracy: state.summaryCards.randomForestData.model_accuracy,
        };
    },
    deepLearningSummary: state => {
        return {
            totalScans: state.summaryCards.deepLearningData.total_scans,
            modelAccuracy: state.summaryCards.deepLearningData.model_accuracy,
        };
    },
};


export default createStore({
    state: {
        pieChart: {
            randomForestData: {
                labels: [],
                datasets: [{data: [], backgroundColor: []}],
            },
            deepLearningData: {
                labels: [],
                datasets: [{data: [], backgroundColor: []}],
            },
        },
        summaryCards: {
            randomForestData: [],
            deepLearningData: [],
        },
        scanActivityChartData: {
            labels: [],
            datasets: [{data: [], backgroundColor: []}],
        },
    },
    mutations: {
        SET_RANDOM_FOREST_DATA(state, rawData) {
            state.pieChart.randomForestData = {
                labels: ['Benign Correct', 'Benign Incorrect', 'Malware Correct', 'Malware Incorrect', 'Unknown Benign', 'Unknown Malware'],
                datasets: [{
                    data: [
                        rawData.benign_correct,
                        rawData.benign_incorrect,
                        rawData.malware_correct,
                        rawData.malware_incorrect,
                        rawData.unknown_benign,
                        rawData.unknown_malware
                    ],
                    backgroundColor: ['#4CAF50', '#FFC107', '#FF5722', '#009688', '#3F51B5', '#9C27B0'],
                }],
            };
            state.summaryCards.randomForestData = rawData;
        },
        SET_DEEP_LEARNING_DATA(state, rawData) {
            state.pieChart.deepLearningData = {
                labels: ['Benign Correct', 'Benign Incorrect', 'Malware Correct', 'Malware Incorrect', 'Unknown Benign', 'Unknown Malware'],
                datasets: [{
                    data: [
                        rawData.benign_correct,
                        rawData.benign_incorrect,
                        rawData.malware_correct,
                        rawData.malware_incorrect,
                        rawData.unknown_benign,
                        rawData.unknown_malware
                    ],
                    backgroundColor: ['#4CAF50', '#FFC107', '#FF5722', '#009688', '#3F51B5', '#9C27B0'],
                }],
            };
            state.summaryCards.deepLearningData = rawData;
        },
        SET_SCAN_ACTIVITY_CHART_DATA(state, rawData) {
            // Extract labels (scan dates) and data points (scan counts)
            const labels = rawData.map(item => item.scan_hour);
            const dataPoints = rawData.map(item => item.scan_count);

            // Update the state with the processed chart data
            state.scanActivityChartData = {
                labels: labels,
                datasets: [
                    {
                        label: 'Scan Activity',
                        data: dataPoints,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                    }
                ],
            };
        },

    },
    actions: {
        async fetchModelData({commit}, modelType) {
            try {
                const data = await fetchScanResultsSummary(modelType);
                if (modelType === 'random_forest') {
                    commit('SET_RANDOM_FOREST_DATA', data);
                } else if (modelType === 'deep_learning') {
                    commit('SET_DEEP_LEARNING_DATA', data);
                }
            } catch (error) {
                console.error(`Error fetching data for ${modelType}:`, error);
            }
        },
        // Action to fetch and commit scan activity data
        async fetchScanActivityData({commit}) {
            try {
                const data = await fetchScanActivitySummary();
                commit('SET_SCAN_ACTIVITY_CHART_DATA', data);
            } catch (error) {
                console.error('Error fetching scan activity data:', error);
            }
        },
    },
    getters,
});

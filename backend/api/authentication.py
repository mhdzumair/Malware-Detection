import argparse
import asyncio
from datetime import timedelta, datetime
from typing import Optional

from jose import JWTError, jwt
from passlib.context import CryptContext

from api.config import settings
from api.models import Users
from api.schemas import UserCreate

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


async def get_user(username: str):
    return await Users.find_one(Users.user == username)


async def create_user(user: UserCreate):
    db_user = Users(user=user.username, password=get_password_hash(user.password))
    await db_user.insert()
    return db_user


async def get_users(skip: int = 0, limit: int = 100):
    return await Users.find().skip(skip).limit(limit).to_list()


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)


async def authenticate_user(username: str, password: str):
    user = await get_user(username)
    if not user:
        return False
    if not verify_password(password, user.password):
        return False
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(
        to_encode, settings.secret_key, algorithm=settings.algorithm
    )
    return encoded_jwt


def get_current_user(token: str):
    try:
        payload = jwt.decode(
            token, settings.secret_key, algorithms=[settings.algorithm]
        )
        username: str = payload.get("sub")
    except JWTError:
        return
    return username


async def create_user_from_args(username: str, password: str):
    user = UserCreate(username=username, password=password)

    db_user = await get_user(user.username)
    if db_user:
        print("User already exists")
        return
    await create_user(user)
    print("User created")


if __name__ == "__main__":
    args = argparse.ArgumentParser(description="Create a new user")
    args.add_argument("-u", "--username", required=True)
    args.add_argument("-p", "--password", required=True)
    args = args.parse_args()

    asyncio.run(create_user_from_args(args.username, args.password))

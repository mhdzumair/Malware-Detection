import argparse
from datetime import timedelta, datetime
from typing import Optional

from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from api.config import settings
from api.database import get_db
from api.models import Users
from api.schemas import UserCreate

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_user(db: Session, username: str):
    return db.query(Users).filter(Users.user == username).first()


def create_user(db: Session, user: UserCreate):
    db_user = Users(user=user.username, password=get_password_hash(user.password))
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user


def get_users(db: Session, skip: int = 0, limit: int = 100):
    return db.query(Users).offset(skip).limit(limit).all()


def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password):
    return pwd_context.hash(password)


def authenticate_user(db, username: str, password: str):
    user = get_user(db, username)
    if not user:
        return False
    if not verify_password(password, user.password):
        return False
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(
        to_encode, settings.secret_key, algorithm=settings.algorithm
    )
    return encoded_jwt


def get_current_user(token: str):
    try:
        payload = jwt.decode(
            token, settings.secret_key, algorithms=[settings.algorithm]
        )
        username: str = payload.get("sub")
    except JWTError:
        return
    return username


def create_user_from_args(username: str, password: str):
    user = UserCreate(username=username, password=password)

    db = next(get_db())
    db_user = get_user(db, user.username)
    if db_user:
        print("User already exists")
        return
    create_user(db, user)
    print("User created")


if __name__ == "__main__":
    args = argparse.ArgumentParser(description="Create a new user")
    args.add_argument("-u", "--username", required=True)
    args.add_argument("-p", "--password", required=True)
    args = args.parse_args()

    create_user_from_args(args.username, args.password)

import hashlib
import zipfile
from io import BytesIO
from typing import List, Tuple, Optional

import requests
from fastapi import HTTPException

from api.config import settings
from defender.feedback import get_virus_total_report


def compute_file_hash(file_data: bytes, hash_type: str = "md5") -> str:
    """
    Computes the hash of a file

    :param file_data: the file data
    :param hash_type: the type of hash to compute
    :return: the hash of the file
    """

    h = hashlib.new(hash_type)
    h.update(file_data)
    return h.hexdigest()


async def get_external_tool_feedback(
    file_data: bytes, md5_file_hash: str
) -> Tuple[List, int]:
    """
    Gets the feedback from external tools

    :param file_data: the file data
    :param md5_file_hash: the md5 hash of the file
    :return: the feedback from external tools
    """
    feedback = []
    scan_result = None

    if settings.virus_total_api_key:
        vt_report = await get_virus_total_report(
            file_data,
            md5_file_hash,
            settings.virus_total_api_key,
        )
        if vt_report:
            feedback.append(vt_report)
            scan_result = 1 if vt_report.get("malicious") > 0 else 0
    else:
        raise ValueError("Virus Total API key not set")

    return feedback, scan_result


def download_file_from_url(url: str) -> bytes:
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.content
    except requests.RequestException as e:
        raise HTTPException(status_code=400, detail=str(e))


def extract_zip_file(file_content: bytes, password: Optional[str]) -> bytes:
    try:
        with zipfile.ZipFile(BytesIO(file_content)) as zip_file:
            zip_file.setpassword(password.encode() if password else None)
            file_info = zip_file.infolist()[0]
            return zip_file.read(file_info)
    except zipfile.BadZipFile:
        raise HTTPException(status_code=400, detail="Bad ZIP file.")
    except RuntimeError:
        raise HTTPException(status_code=400, detail="Incorrect ZIP password.")


def is_zip_file(file_content: bytes) -> bool:
    return file_content.startswith(b"PK")

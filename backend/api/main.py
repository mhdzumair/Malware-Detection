import logging
from typing import Literal, Optional

from fastapi import FastAPI, HTTPException, Depends, Query, Security
from fastapi import UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import (
    OAuth2PasswordBearer,
    OAuth2PasswordRequestForm,
    APIKeyHeader,
)

from api import authentication, database
from api import utils
from api.config import settings
from api.models import FileScan
from api.schemas import TokenData, Token, S3Scan

logging.basicConfig(
    format="%(levelname)s::%(asctime)s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
    level=logging.INFO,
)
app = FastAPI(description="Malware Detection API")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="authentication")
api_key_header = APIKeyHeader(name="X-API-KEY", auto_error=True)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.on_event("startup")
async def init_db():
    await database.init_db()


async def authenticate_oauth(token: str = Security(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    username = authentication.get_current_user(token)
    if username is None:
        raise credentials_exception
    token_data = TokenData(username=username)

    user = await authentication.get_user(username=token_data.username)
    if user is None:
        raise credentials_exception
    return user


async def authenticate_api_key(
    api_key: str = Security(api_key_header),
):
    if (
        settings.malware_detection_server_api_key
        and api_key == settings.malware_detection_server_api_key
    ):
        return

    raise HTTPException(
        status_code=401,
        detail="Could not API key",
        headers={"WWW-Authenticate": "Bearer"},
    )


@app.get("/")
async def root():
    return {"message": "Malware Detection API"}


@app.post("/api/authentication", response_model=Token)
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = await authentication.authenticate_user(
        form_data.username, form_data.password
    )
    if not user:
        raise HTTPException(
            status_code=401,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token = authentication.create_access_token(
        data={"sub": user.user}, expires_delta=settings.access_token_expire
    )

    return Token(access_token=access_token, token_type="bearer")


@app.post("/api/scan")
async def scan(
    file: Optional[UploadFile] = None,
    file_url: Optional[str] = None,
    zip_password: Optional[str] = None,
    known_status: Optional[int] = Query(default=None, le=1, ge=0),
    external_tools: bool = None,
    force_rescan: bool = None,
    _=Depends(authenticate_oauth),
):
    file_data, _ = await utils.fetch_file_data(
        file=file, file_url=file_url, zip_password=zip_password
    )
    return await utils.perform_scan(
        file_data=file_data,
        known_status=known_status,
        external_tools=external_tools,
        force_rescan=force_rescan,
    )


@app.post("/api/scan_with_api_key")
async def scan(
    file: Optional[UploadFile] = None,
    file_url: Optional[str] = None,
    zip_password: Optional[str] = None,
    known_status: Optional[int] = Query(default=None, le=1, ge=0),
    external_tools: bool = None,
    force_rescan: bool = None,
    _=Depends(authenticate_api_key),
):
    file_data, _ = await utils.fetch_file_data(
        file=file, file_url=file_url, zip_password=zip_password
    )
    return await utils.perform_scan(
        file_data=file_data,
        known_status=known_status,
        external_tools=external_tools,
        force_rescan=force_rescan,
    )


@app.get("/api/scans")
async def list_scans(
    skip: int = 0,
    limit: int = Query(default=100, le=100, ge=1),
    _=Depends(authenticate_oauth),
):
    total_count = await FileScan.count()
    scans = await FileScan.find().skip(skip).limit(limit).to_list()
    return {"items": scans, "total": total_count}


@app.get("/api/scans/{scan_id}")
async def get_scan(
    scan_id: str,
    _=Depends(authenticate_oauth),
):
    scan_data = await FileScan.get(scan_id)
    if scan_data is None:
        raise HTTPException(status_code=404, detail="Scan not found")
    return scan_data


@app.get("/api/scan-results-summary/{model_type}")
async def get_scan_results_summary(
    model_type: Literal["random_forest", "deep_learning"],
    _=Depends(authenticate_oauth),
):
    model_result_field = (
        FileScan.random_forest_result
        if model_type == "random_forest"
        else FileScan.deep_learning_result
    )

    # Fetch and aggregate data
    pipeline = [
        {
            "$group": {
                "_id": {
                    "known_status": "$known_status",
                    "model_result": f"${model_result_field}",
                },
                "count": {"$sum": 1},
            }
        }
    ]
    summary_data = await FileScan.aggregate(pipeline).to_list(length=None)

    # Transform to a more pie-chart-friendly format
    result_summary = {
        "benign_correct": 0,
        "benign_incorrect": 0,
        "malware_correct": 0,
        "malware_incorrect": 0,
        "unknown_benign": 0,
        "unknown_malware": 0,
        "total_scans": 0,
        "model_accuracy": "N/A",
    }

    for record in summary_data:
        known_status = record["_id"]["known_status"]
        model_result = record["_id"]["model_result"]
        count = record["count"]
        if known_status == 0:
            key = "benign_correct" if model_result == 0 else "benign_incorrect"
        elif known_status == 1:
            key = "malware_correct" if model_result == 1 else "malware_incorrect"
        else:  # known_status is None
            key = "unknown_benign" if model_result == 0 else "unknown_malware"
        result_summary[key] += count
        result_summary["total_scans"] += count

    if result_summary["total_scans"] > 0:
        accuracy = (
            result_summary["benign_correct"] + result_summary["malware_correct"]
        ) / (
            result_summary["total_scans"]
            - result_summary["unknown_benign"]
            - result_summary["unknown_malware"]
        )
        result_summary["model_accuracy"] = f"{accuracy:.2%}"

    return result_summary


@app.get("/api/scan-activity-summary")
async def get_scan_activity_summary(_=Depends(authenticate_oauth)):
    pipeline = [
        {
            "$project": {
                "scan_hour": {
                    "$dateToString": {"format": "%Y-%m-%d %H:00", "date": "$scanned_at"}
                }
            }
        },
        {"$group": {"_id": "$scan_hour", "scan_count": {"$sum": 1}}},
        {"$sort": {"_id": 1}},
    ]
    hourly_activity = await FileScan.aggregate(pipeline).to_list(length=None)

    hourly_data = [
        {"scan_hour": record["_id"], "scan_count": record["scan_count"]}
        for record in hourly_activity
    ]
    return hourly_data


@app.post("/api/s3-scan")
async def scan_s3(
    scan_data: S3Scan,
    _=Depends(authenticate_api_key),
):
    file_data, _ = await utils.fetch_file_data(
        s3_bucket=scan_data.bucket, s3_path=scan_data.key
    )
    file_scan_response = await utils.perform_scan(
        file_data=file_data,
        known_status=None,
        external_tools=scan_data.external_tools,
        force_rescan=False,
    )
    if (
        file_scan_response.get("deep_learning_result") == 1
        or file_scan_response.get("random_forest_result") == 1
    ):
        logging.info(
            f"Malware detected in file {scan_data.key} in bucket {scan_data.bucket}. Sending alert."
        )
        message = (
            "Hi Admin,\n\n"
            "A file was scanned for malware with the following details:\n\n"
            f"Bucket: {scan_data.bucket}\n"
            f"File: {scan_data.key}\n\n"
            "Scan results:\n"
            f"MD5: {file_scan_response.get('md5_file_hash')}\n"
            f"Deep learning model Prediction: {'Malware' if file_scan_response.get('deep_learning_result') == 1 else 'Benign'}\n"
            f"Random forest model Prediction: {'Malware' if file_scan_response.get('random_forest_result') == 1 else 'Benign'}\n\n"
            "Regards,\n"
            "Malware Detection Lambda Function"
        )
        utils.send_notification(message)
        utils.delete_s3_file(scan_data.bucket, scan_data.key)
    else:
        utils.move_s3_file(
            scan_data.bucket, scan_data.key, scan_data.destination_bucket
        )
    return file_scan_response


@app.post("/api/upload-to-s3")
async def upload_to_s3(
    s3_bucket: str,
    file: Optional[UploadFile] = None,
    file_url: Optional[str] = None,
    zip_password: Optional[str] = None,
    _=Depends(authenticate_oauth),
):
    try:
        file_data, file_name = await utils.fetch_file_data(
            file=file, file_url=file_url, zip_password=zip_password
        )

        utils.upload_file_to_s3(s3_bucket, file_data, file_name)
        return {"message": f"File '{file_name}' uploaded to S3 bucket."}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/scan-ec2")
async def scan_ec2(
    file: UploadFile,
    instance_id: str,
    _=Depends(authenticate_api_key),
):
    file_data, file_name = await utils.fetch_file_data(file=file)
    file_scan_response = await utils.perform_scan(
        file_data=file_data,
        known_status=None,
        external_tools=False,
        force_rescan=False,
    )

    if (
        file_scan_response.get("deep_learning_result") == 1
        or file_scan_response.get("random_forest_result") == 1
    ):
        message = (
            "Hi Admin,\n\n"
            "A EC2 file was scanned for malware with the following details:\n\n"
            f"Instance ID: {instance_id}\n"
            "Scan results:\n"
            f"File: {file_name}\n"
            f"MD5: {file_scan_response.get('md5_file_hash')}\n"
            f"Deep learning model Prediction: {'Malware' if file_scan_response.get('deep_learning_result') == 1 else 'Benign'}\n"
            f"Random forest model Prediction: {'Malware' if file_scan_response.get('random_forest_result') == 1 else 'Benign'}\n\n"
            "Regards,\n"
            "Malware Detection Lambda Function"
        )
        utils.send_notification(message)

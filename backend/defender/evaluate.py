import argparse
import json
import zipfile
from pathlib import Path

import requests
from tqdm import tqdm


MAX_FILE_SIZE = 5 * (2**20)  # 5 MiB


def scan_file(file_path, url, known_status=None):
    with open(file_path, "rb") as file:
        files = {"file": file}
        params = {"known_status": known_status} if known_status is not None else {}
        response = requests.post(url, files=files, params=params)
        try:
            response.raise_for_status()
        except requests.exceptions.HTTPError as e:
            print(f"Error scanning {file_path.name}: {e}")
            return {}
    return response.json()


# Function to process and send files from a directory or ZIP archive
def process_files(file_path, url, known_status=None):  # Default max file size 5 MB
    if file_path.suffix.lower() == ".zip":
        with zipfile.ZipFile(file_path, "r") as zip_ref:
            for file_info in tqdm(zip_ref.infolist(), desc="Processing ZIP"):
                if file_info.file_size <= MAX_FILE_SIZE:
                    with zip_ref.open(file_info.filename) as file:
                        file_content = file.read()
                        response = scan_file(file_content, url, known_status)
                        yield file_info.filename, response
                else:
                    print(f"Skipping {file_info.filename} (too large)")
    else:
        for child in tqdm(file_path.iterdir(), desc="Processing Files"):
            if child.is_file() and child.stat().st_size <= MAX_FILE_SIZE:
                response = scan_file(child, url, known_status)
                yield child.name, response
            else:
                print(f"Skipping {child.name} (too large)")


# Main function
def main():
    parser = argparse.ArgumentParser(description="Malware Scan API Evaluator")
    parser.add_argument("--url", type=str, required=True, help="API endpoint URL")
    parser.add_argument(
        "--path", type=str, required=True, help="Path to files or ZIP archive"
    )
    parser.add_argument(
        "--known_status",
        type=int,
        choices=[0, 1],
        default=None,
        help="Known status of the files (0 for benign, 1 for malicious)",
    )
    args = parser.parse_args()

    file_path = Path(args.path)
    assert file_path.exists(), "File or directory does not exist"

    total_files = 0
    dl_malware_detected = 0
    rf_malware_detected = 0
    matches_known_status = 0

    for file_name, result in process_files(file_path, args.url, args.known_status):
        total_files += 1
        if result.get("deep_learning_result") == 1:
            dl_malware_detected += 1
        if result.get("random_forest_result") == 1:
            rf_malware_detected += 1
        if result.get("known_status") is not None and result.get(
            "known_status"
        ) == result.get("deep_learning_result"):
            matches_known_status += 1

    # Output the summary
    summary = {
        "total_files_scanned": total_files,
        "deep_learning_malware_detected": dl_malware_detected,
        "random_forest_malware_detected": rf_malware_detected,
        "matches_known_status": matches_known_status,
    }
    print(json.dumps(summary, indent=2))


if __name__ == "__main__":
    main()

param (
    [string]$serverUrl,
    [string]$apiKey
)

function Get-InstanceId {
    try {
        $instanceId = Invoke-RestMethod -Uri http://169.254.169.254/latest/meta-data/instance-id
        return $instanceId
    }
    catch {
        Write-Host "Unable to retrieve Instance ID: $_"
        return $null
    }
}

function Scan-File($filePath) {
    try {
        $instanceId = Get-InstanceId
        $uri = "$serverUrl/api/scan-ec2?instance_id=$instanceId"
        $headers = @{ "X-API-KEY" = $apiKey }
        $boundary = [System.Guid]::NewGuid().ToString()
        $LF = "`r`n"

        $bodyLines = (
            "--$boundary",
            "Content-Disposition: form-data; name=`"file`"; filename=`"$([System.IO.Path]::GetFileName($filePath))`"",
            "Content-Type: application/octet-stream$LF",
            [System.IO.File]::ReadAllBytes($filePath),
            "--$boundary--$LF"
        )

        $body = [System.Text.Encoding]::UTF8.GetBytes($bodyLines -join $LF)
        $headers["Content-Type"] = "multipart/form-data; boundary=$boundary"

        $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body -ContentType $headers["Content-Type"]
        Write-Host "Scan result for $filePath: $($response | Out-String)"
    }
    catch {
        Write-Host "Error scanning $filePath: $_"
    }
}

# Loop through all files in the system
Get-ChildItem -Path C:\ -Recurse -Filter *.exe -ErrorAction SilentlyContinue | Where-Object { $_.Length -lt 5MB } | ForEach-Object {
    Write-Host "Scanning file: $($_.FullName)"
    Scan-File -filePath $_.FullName
}

Write-Host "Malware scanning script executed with URL: $serverUrl and API Key: $apiKey"
